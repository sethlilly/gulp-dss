{
  "name": "dss",
  "description": "Documented Style Sheets",
  "version": "1.0.4",
  "homepage": "https://github.com/sethlilly/dss",
  "author": {
    "name": "sethlilly",
    "email": "seth.lilly@gmail.com",
    "url": "http://sethlilly.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sethlilly/dss.git"
  },
  "bugs": {
    "url": "https://github.com/sethlilly/dss/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sethlilly/dss/blob/master/LICENSE-MIT"
    }
  ],
  "main": "dss.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "nodeunit"
  },
  "dependencies": {
    "jade": "^1.9.2",
    "marked": "^0.3.3"
  },
  "devDependencies": {
    "nodeunit": "^0.9.1"
  },
  "peerDependencies": {},
  "keywords": [
    "css",
    "dss",
    "styles",
    "docs",
    "documentation"
  ],
  "gitHead": "1f668947f16fd0e365f4c0a25ae91a70660e5278",
  "readme": "![DSS](http://cl.ly/image/2p0C122U0N32/logo.png)\n- **[Official Logo](http://cl.ly/image/2p0C122U0N32/logo.png)**\n- **[NPM Package](https://npmjs.org/package/dss)**\n\n[![NPM](https://nodei.co/npm/dss.png?downloadRank=true)](https://npmjs.org/package/dss)  \n\n**DSS**, Documented Style Sheets is a comment guide and parser for CSS, LESS, STYLUS, SASS and SCSS code. This project does static file analysis and parsing to generate an object to be used for generating styleguides.\n\n\n##### Table of Contents\n\n- [Parsing a File](#parsing-a-file)\n  - [`dss.detector`](#dssdetector-callback-)\n  - [`dss.parser`](#dssparser-name-callback-)\n- [Other Projects](#other-projects)\n\n### Parsing a File\n\nIn most cases, you will want to include the **DSS** parser in a build step that will generate documentation files automatically (or you just want to play around with this returned `Object` for other means); Either way, we officially support a [Grunt Plugin](https://github.com/dsswg/grunt-dss) and a [Gulp Plugin](http://github.com/dsswg/gulp-dss).\n\n### Examples\n\n##### Example Comment Block Format\n\n\n```scss\n//\n// @name Button\n// @description Your standard form button.\n// \n// @state :hover - Highlights when hovering.\n// @state :disabled - Dims the button when disabled.\n// @state .primary - Indicates button is the primary action.\n// @state .smaller - A smaller button\n// \n// @markup\n//   <button>This is a button</button>\n// \n````\n\n##### Example Usage\n\n```javascript\n// Requirements\nvar fs = require( 'fs' );\nvar dss = require( 'dss' );\n\n// Get file contents\nvar fileContents = fs.readFileSync( 'styles.css' );\n\n// Run the DSS Parser on the file contents\ndss.parse( fileContents, {}, function ( parsedObject ) {\n\n  // Output the parsed document\n  console.log( parsedObject );\n\n});\n\n````\n\n##### Example Output\n\n```json\n{\n  \"name\": \"Button\",\n  \"description\": \"Your standard form button.\",\n  \"state\": [\n    { \n      \"name\": \":hover\",\n      \"escaped\": \"pseudo-class-hover\",\n      \"description\": \"Highlights when hovering.\"\n    },\n    {\n      \"name\": \":disabled\",\n      \"escaped\": \"pseudo-class-disabled\",\n      \"description\": \"Dims the button when disabled.\"\n    },\n    {\n      \"name\": \".primary\",\n      \"escaped\": \"primary\",\n      \"description\": \"Indicates button is the primary action.\"\n    },\n    {\n      \"name\": \".smaller\",\n      \"escaped\": \"smaller\",\n      \"description\": \"A smaller button\"\n    }\n  ],\n  \"markup\": {\n    \"example\": \"<button>This is a button</button>\",\n    \"escaped\": \"&lt;button&gt;This is a button&lt;/button&gt;\"\n  }\n}\n````\n#### dss.detector( callback )\n\nThis method defines the way in which points of interest (ie. variables) are found in lines of text and then, later, parsed. **DSS** dogfoods this API and the default implementation is shown below.\n\n###### Default Detector:\n\n```javascript\n// Describe default detection pattern\n// Note: the current line, as a string, is passed to this function\ndss.detector( function( line ) {\n  \n  if ( typeof line !== 'string' ) {\n    return false;\n  }\n  var reference = line.split( \"\\n\\n\" ).pop();\n  return !!reference.match( /.*@/ );\n\n});\n````\n\n#### dss.parser( name, callback )\n\n**DSS**, by default, includes 4 parsers for the `name`, `description`, `state` and `markup` of a comment block. You can add to, or override, these defaults by registering a new parser. These defaults also follow a pattern which uses the `@` decorator to identify them. You can modify this behaivour providing a different callback function to `dss.detector()`.\n\n`dss.parser` expects the name of the variable you're looking for and a callback function to manipulate the contents. Whatever is returned by that callback function is what is used in generate JSON.\n\n##### Callback `this`:\n\n- `this.file`: The current file\n- `this.name`: The name of the parser\n- `this.options`: The options that were passed to `dss.parse()` initially\n- `this.line`:\n  - `this.line.contents`: The content associated with this variable\n  - `this.line.from`: The line number where this variable was found\n  - `this.line.to`: The line number where this variable's contents ended\n- `this.block`:\n  - `this.block.contents`: The content associated with this variable's comment block\n  - `this.block.from`: The line number where this variable's comment block starts\n  - `this.block.to`: The line number where this variable's comment block ends\n  \n    \n##### Custom Parser Examples:\n\n```javascript\n// Matches @version\ndss.parser( 'version', function () {\n\n  // Just returns the lines contents\n  return this.line.contents;\n\n});\n````\n\n```javascript\ndss.parser( 'link', function () {\n\n  // Replace link with HTML wrapped version\n  var exp = /(b(https?|ftp|file)://[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/ig;\n  this.line.contents.replace(exp, \"<a href='$1'>$1</a>\");\n  return line;\n   \n});\n````\n\n### Other Projects\n- [Grunt Plugin](http://github.com/dsswg/grunt-dss)\n- [Gulp Plugin](http://github.com/dsswg/gulp-dss)\n- [Sublime Text Plugin](https://github.com/sc8696/sublime-css-auto-comments)\n- [UX Recorder](http://github.com/dsswg/dss-recorder)\n- [UX Player](http://github.com/dsswg/dss-player)\n",
  "readmeFilename": "README.md",
  "_id": "dss@1.0.4",
  "_shasum": "27d98f3763b6796860ee8feef8aec9197e4c5cda",
  "_from": "sethlilly/dss",
  "_resolved": "git://github.com/sethlilly/dss.git#1f668947f16fd0e365f4c0a25ae91a70660e5278"
}
